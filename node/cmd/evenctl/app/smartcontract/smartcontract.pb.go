// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smartcontract/smartcontract.proto

package smartcontract

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContractUri struct {
	Uri                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractUri) Reset()         { *m = ContractUri{} }
func (m *ContractUri) String() string { return proto.CompactTextString(m) }
func (*ContractUri) ProtoMessage()    {}
func (*ContractUri) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc142fe473ffa52c, []int{0}
}

func (m *ContractUri) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContractUri.Unmarshal(m, b)
}
func (m *ContractUri) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContractUri.Marshal(b, m, deterministic)
}
func (m *ContractUri) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractUri.Merge(m, src)
}
func (m *ContractUri) XXX_Size() int {
	return xxx_messageInfo_ContractUri.Size(m)
}
func (m *ContractUri) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractUri.DiscardUnknown(m)
}

var xxx_messageInfo_ContractUri proto.InternalMessageInfo

func (m *ContractUri) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type ContractResult struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractResult) Reset()         { *m = ContractResult{} }
func (m *ContractResult) String() string { return proto.CompactTextString(m) }
func (*ContractResult) ProtoMessage()    {}
func (*ContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc142fe473ffa52c, []int{1}
}

func (m *ContractResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContractResult.Unmarshal(m, b)
}
func (m *ContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContractResult.Marshal(b, m, deterministic)
}
func (m *ContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractResult.Merge(m, src)
}
func (m *ContractResult) XXX_Size() int {
	return xxx_messageInfo_ContractResult.Size(m)
}
func (m *ContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_ContractResult proto.InternalMessageInfo

func (m *ContractResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*ContractUri)(nil), "smartcontract.ContractUri")
	proto.RegisterType((*ContractResult)(nil), "smartcontract.ContractResult")
}

func init() { proto.RegisterFile("smartcontract/smartcontract.proto", fileDescriptor_cc142fe473ffa52c) }

var fileDescriptor_cc142fe473ffa52c = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0xce, 0x4d, 0x2c,
	0x2a, 0x49, 0xce, 0xcf, 0x2b, 0x29, 0x4a, 0x4c, 0x2e, 0xd1, 0x47, 0xe1, 0xe9, 0x15, 0x14, 0xe5,
	0x97, 0xe4, 0x0b, 0xf1, 0xa2, 0x08, 0x2a, 0xc9, 0x73, 0x71, 0x3b, 0x43, 0xd9, 0xa1, 0x45, 0x99,
	0x42, 0x02, 0x5c, 0xcc, 0xa5, 0x45, 0x99, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6,
	0x92, 0x06, 0x17, 0x1f, 0x4c, 0x41, 0x50, 0x6a, 0x71, 0x69, 0x4e, 0x89, 0x90, 0x18, 0x17, 0x5b,
	0x11, 0x98, 0x05, 0x55, 0x06, 0xe5, 0x19, 0x85, 0x70, 0xf1, 0x06, 0x83, 0xcc, 0x86, 0x29, 0x17,
	0x72, 0xe6, 0x62, 0x71, 0x4e, 0xcc, 0xc9, 0x11, 0x92, 0xd2, 0x43, 0x75, 0x08, 0x92, 0x85, 0x52,
	0xb2, 0x38, 0xe4, 0x20, 0x76, 0x29, 0x31, 0x24, 0xb1, 0x81, 0x9d, 0x6d, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xe0, 0x39, 0xce, 0xb8, 0xdb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SmartContractClient is the client API for SmartContract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmartContractClient interface {
	Call(ctx context.Context, in *ContractUri, opts ...grpc.CallOption) (*ContractResult, error)
}

type smartContractClient struct {
	cc *grpc.ClientConn
}

func NewSmartContractClient(cc *grpc.ClientConn) SmartContractClient {
	return &smartContractClient{cc}
}

func (c *smartContractClient) Call(ctx context.Context, in *ContractUri, opts ...grpc.CallOption) (*ContractResult, error) {
	out := new(ContractResult)
	err := c.cc.Invoke(ctx, "/smartcontract.SmartContract/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartContractServer is the server API for SmartContract service.
type SmartContractServer interface {
	Call(context.Context, *ContractUri) (*ContractResult, error)
}

func RegisterSmartContractServer(s *grpc.Server, srv SmartContractServer) {
	s.RegisterService(&_SmartContract_serviceDesc, srv)
}

func _SmartContract_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractUri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcontract.SmartContract/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServer).Call(ctx, req.(*ContractUri))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmartContract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcontract.SmartContract",
	HandlerType: (*SmartContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _SmartContract_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smartcontract/smartcontract.proto",
}
